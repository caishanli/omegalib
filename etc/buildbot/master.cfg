# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
		BuildSlave("lyra64", "lyra64Slave"),
		BuildSlave("phobos", "phobos123456"),
		BuildSlave("aigu", "aigu123")
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/uic-evl/omegalib.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/omega-hub/omegaOsgEarth',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/omega-hub/omegaOsg',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/uic-evl/omicron',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))




####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps import shell
from buildbot.steps.shell import ShellCommand
from buildbot.steps import slave

cmakeArgs = '-DMODULES=omegaOsg cyclops omegaOsgEarth'
############### Linux64
linux64factory = BuildFactory()
# check out the source
linux64factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir
#linux64factory.addStep(slave.RemoveDirectory(
#  dir='build',
#  haltOnFailure=False,
#  flunkOnFailure=False))

#linux64factory.addStep(slave.MakeDirectory(
#  dir='build'))

linux64factory.addStep(shell.Configure(command=["cmake", "-DCMAKE_BUILD_TYPE=Release", "../"], workdir="build/build"))
linux64factory.addStep(shell.Compile(command=["make"], workdir="build/build"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="OmegaLib Linux 64bit",
      slavenames=["lyra64"],
      factory=linux64factory))

######### Mac OSX 64
mac64factory = BuildFactory()
# check out the source
mac64factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

mac64factory.addStep(shell.Configure(command=["cmake", "-DCMAKE_BUILD_TYPE=Release", "../"], workdir="build/build"))
mac64factory.addStep(shell.Compile(command=["make", "-j", "6"], workdir="build/build"))

c['builders'].append(
    BuilderConfig(name="OmegaLib Mac OSX 10.7 64bit",
      slavenames=["phobos"],
      factory=mac64factory))

######## Windows 64
win64factory = BuildFactory()
# check out the source
win64factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

win64factory.addStep(shell.Configure(command=["cmake", "-G", "Visual Studio 10",  "../"], workdir="build\\build"))

win64factory.addStep(shell.Compile(command=["..\..\wrap64.bat", "devenv", "OmegaLib.sln", "/Build", "Release"], workdir="build\\build"))

#from buildbot.steps.vstudio import VS2010

#win64factory.addStep(VS2010(
#        projectfile="OmegaLib.sln", config="Release",
#        arch="Win64", mode="build"))

#win64factory.addStep(shell.ShellCommand(command=["C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"]))

#c['builders'].append(
#    BuilderConfig(name="OmegaLib Windows7 64bit",
#      slavenames=["aigu"],
#      factory=win64factory))

####### ALL MODULES ###########

############### Linux64
linux64modefactory = BuildFactory()
# check out the source
linux64modefactory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir
#linux64factory.addStep(slave.RemoveDirectory(
#  dir='build',
#  haltOnFailure=False,
#  flunkOnFailure=False))

#linux64factory.addStep(slave.MakeDirectory(
#  dir='build'))

linux64modefactory.addStep(shell.Configure(command=['cmake', cmakeArgs, "-DCMAKE_BUILD_TYPE=Release", '../'], workdir="build/build"))
linux64modefactory.addStep(shell.Compile(command=["make"], workdir="build/build"))

from buildbot.config import BuilderConfig

c['builders'].append(
    BuilderConfig(name="OmegaLib Linux 64bit ALL MODULES",
      slavenames=["lyra64"],
      factory=linux64modefactory))

######### Mac OSX 64
mac64modefactory = BuildFactory()
# check out the source
mac64modefactory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

mac64modefactory.addStep(shell.Configure(command=['cmake', cmakeArgs, "-DCMAKE_BUILD_TYPE=Release", '../'], workdir="build/build"))
mac64modefactory.addStep(shell.Compile(command=["make", "-j", "6"], workdir="build/build"))

c['builders'].append(
    BuilderConfig(name="OmegaLib Mac OSX 10.7 64bit ALL MODULES",
      slavenames=["phobos"],
      factory=mac64modefactory))

######## Windows 64
win32modefactory = BuildFactory()
# check out the source
win32modefactory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

win32modefactory.addStep(shell.Configure(command=['cmake', cmakeArgs, "-DCMAKE_BUILD_TYPE=Release", '../'], workdir="build\\build"))

win32modefactory.addStep(shell.Compile(command=["..\..\..\wrap32.bat", "devenv", "OmegaLib.sln", "/Build", "Release"], workdir="build\\build"))

#win32factory.addStep(VS2010(
#        projectfile="OmegaLib.sln", config="Release",
#        arch="Win32", mode="build"))


c['builders'].append(
    BuilderConfig(name="Win7 32 ALL MODULES",
      slavenames=["aigu"],
      factory=win32modefactory))

############### Linux32
linux32factory = BuildFactory()
# check out the source
linux32factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

#linux32factory.addStep(slave.RemoveDirectory(
#  dir='build',
#  haltOnFailure=False,
#  flunkOnFailure=False))

#linux32factory.addStep(slave.MakeDirectory(
#  dir='build'))

linux32factory.addStep(shell.Configure(command=["cmake", "-DCMAKE_BUILD_TYPE=Release", "."]))
linux32factory.addStep(shell.Compile(command=["make"]))


#c['builders'].append(
#    BuilderConfig(name="OmegaLib Linux 32bit",
#      slavenames=["lyra64"],
#      env={'CFLAGS': '-m32', 'CXXFLAGS': '-m32'},
#      factory=linux32factory))

######### Mac OSX 32
mac32factory = BuildFactory()
# check out the source
mac32factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

mac32factory.addStep(shell.Configure(command=["cmake", "-DCMAKE_OSX_ARCHITECTURES=i386", "-DCMAKE_BUILD_TYPE=Release", "../"]))
mac32factory.addStep(shell.Compile(command=["make", "-j", "6"]))

#c['builders'].append(
#    BuilderConfig(name="OmegaLib Mac OSX 10.7 32bit",
#      slavenames=["phobos"],
#      factory=mac32factory))

######## Windows 32
win32factory = BuildFactory()
# check out the source
win32factory.addStep(Git(repourl='https://github.com/uic-evl/omegalib.git', mode='full', submodules=True, alwaysUseLatest=True))
# run the tests (note that this will require that 'trial' is installed)
# recreate build dir

win32factory.addStep(shell.Configure(command=["cmake", "-DCMAKE_BUILD_TYPE=Release", "../"], workdir="build\\build"))

win32factory.addStep(shell.Compile(command=["..\..\..\wrap32.bat", "devenv", "OmegaLib.sln", "/Build", "Release"], workdir="build\\build"))

#win32factory.addStep(VS2010(
#        projectfile="OmegaLib.sln", config="Release",
#        arch="Win32", mode="build"))


c['builders'].append(
    BuilderConfig(name="OmegaLib Windows7 32bit",
      slavenames=["aigu"],
      factory=win32factory))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'OmegaLib' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=[
					"OmegaLib Linux 64bit", 
					"OmegaLib Mac OSX 10.7 64bit",
					"OmegaLib Windows7 32bit",
                    "OmegaLib Linux 64bit ALL MODULES", 
					"OmegaLib Mac OSX 10.7 64bit ALL MODULES",
					"Win7 32 ALL MODULES"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=[
					"OmegaLib Linux 64bit", 
					"OmegaLib Mac OSX 10.7 64bit",
					"OmegaLib Windows7 32bit",
                    "OmegaLib Linux 64bit ALL MODULES", 
					"OmegaLib Mac OSX 10.7 64bit ALL MODULES",
					"Win7 32 ALL MODULES"]))

####### Mail notifiers
from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="buildbot@example.org",
from buildbot.status.builder import Results

import cgi, datetime

def html_message_formatter(mode, name, build, results, master_status):
    """Provide a customized message to Buildbot's MailNotifier.

    The last 80 lines of the log are provided as well as the changes
    relevant to the build.  Message content is formatted as html.
    """
    result = Results[results]

    limit_lines = 80
    text = list()
    text.append(u'<h4>Build status: %s</h4>' % result.upper())
    text.append(u'<h4>Build is BROKEN. Please check the logs on buildbot (phobos.evl.uic.edu:8010) and if you broke it, YOU fix it.')
    text.append(u'<table cellspacing="10"><tr>')
    text.append(u"<td>Buildslave for this Build:</td><td><b>%s</b></td></tr>" % build.getSlavename())
    if master_status.getURLForThing(build):
        text.append(u'<tr><td>Complete logs for all build steps:</td><td><a href="%s">%s</a></td></tr>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
        text.append(u'<tr><td>Build Reason:</td><td>%s</td></tr>' % build.getReason())
        source = u""
        for ss in build.getSourceStamps():
            if ss.codebase:
                source += u'%s: ' % ss.codebase
            if ss.branch:
                source += u"[branch %s] " % ss.branch
            if ss.revision:
                source +=  ss.revision
            else:
                source += u"HEAD"
            if ss.patch:
                source += u" (plus patch)"
            if ss.patch_info: # add patch comment
                source += u" (%s)" % ss.patch_info[1]
        text.append(u"<tr><td>Build Source Stamp:</td><td><b>%s</b></td></tr>" % source)
        text.append(u"<tr><td>Blamelist:</td><td>%s</td></tr>" % ",".join(build.getResponsibleUsers()))
        text.append(u'</table>')
        if ss.changes:
            text.append(u'<h4>Recent Changes:</h4>')
            for c in ss.changes:
                cd = c.asDict()
                when = datetime.datetime.fromtimestamp(cd['when'] ).ctime()
                text.append(u'<table cellspacing="10">')
                text.append(u'<tr><td>Repository:</td><td>%s</td></tr>' % cd['repository'] )
                text.append(u'<tr><td>Project:</td><td>%s</td></tr>' % cd['project'] )
                text.append(u'<tr><td>Time:</td><td>%s</td></tr>' % when)
                text.append(u'<tr><td>Changed by:</td><td>%s</td></tr>' % cd['who'] )
                text.append(u'<tr><td>Comments:</td><td>%s</td></tr>' % cd['comments'] )
                text.append(u'</table>')
                files = cd['files']
                if files:
                    text.append(u'<table cellspacing="10"><tr><th align="left">Files</th></tr>')
                    for file in files:
                        text.append(u'<tr><td>%s:</td></tr>' % file['name'] )
                    text.append(u'</table>')
        text.append(u'<br>')
        # get log for last step
        logs = build.getLogs()
        # logs within a step are in reverse order. Search back until we find stdio
        for log in reversed(logs):
            if log.getName() == 'stdio':
                break
        name = "%s.%s" % (log.getStep().getName(), log.getName())
        status, dummy = log.getStep().getResults()
        content = log.getText().splitlines() # Note: can be VERY LARGE
        url = u'%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                       log.getStep().getName(),
                                       log.getName())

        text.append(u'<i>Detailed log of last build step:</i> <a href="%s">%s</a>'
                    % (url, url))
        text.append(u'<br>')
        text.append(u'<h4>Last %d lines of "%s"</h4>' % (limit_lines, name))
        unilist = list()
        for line in content[len(content)-limit_lines:]:
            unilist.append(cgi.escape(unicode(line,'utf-8')))
        text.append(u'<pre>'.join([uniline for uniline in unilist]))
        text.append(u'</pre>')
        text.append(u'<br><br>')
        text.append(u'<b>-The Buildbot</b>')
        return {
            'body': u"\n".join(text),
            'type': 'html'
            }

mn = MailNotifier(fromaddr="buildbot@phobos.evl.uic.edu",
                  sendToInterestedUsers=False,
                  mode=('problem'),
                  extraRecipients=['mvictoras@gmail.com', 'shi.j.yin@gmail.com', 'febret@gmail.com', 'tmarri2@uic.edu', 'anishi2@uic.edu'],
		  relayhost="mail.uic.edu", smtpPort=587,
                  smtpUser="vmatee2", smtpPassword="Aq1xsw2c", 
                  messageFormatter=html_message_formatter)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("evlroot","evl123")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(mn)
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OmegaLib"
c['titleURL'] = "https://github.com/uic-evl/omegalib.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://phobos.evl.uic.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
